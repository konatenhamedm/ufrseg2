{% extends 'base-layout.html.twig' %}

{% block title %}
    DELIBERATION
{% endblock %}
{% block header %}Examen: {{ examen.libelle }} {% endblock %}
{% block breadcrumb %}{% endblock %}
{% block body %}
    {% form_theme form 'widget/fields-block.html.twig' %}
    {{ form_start(form, {'attr': {'role':'form', 'class': 'form'}}) }}    
    <div class="card card-custom card-sticky gutter-b" id="kt_page_sticky_card">
        <div class="card-header  flex-wrap border-1 pt-0 pb-0">
            <div class="card-title">
                <h3 class="card-label">FICHE INDIVIDUELLE DE DELIBERATION - {{ examen.libelle }} <span class="d-block text-muted pt-0 font-size-sm"></h3>
            </div>
            <div class="card-toolbar">
                <a href="{{ path('app_direction_deliberation_index') }}" class="btn btn-light-main btn-sm font-weight-bolder" >
                    <span class="svg-icon svg-icon-md"><i class="ki ki-solid-plus"></i></span>
                    Retours Ã  la liste des examens
                </a>
                <button name="sticky-submit" id="sticky-submit" class="btn btn-main btn-sm btn-ajax">
                    <span class="spinner-border d-none  spinner-ajax spinner-border-sm" role="status" aria-hidden="true"></span>
                    Valider
                </button>
            </div>
        </div>
         {% from '_macros/direction.html.twig' import prototype_ligne_deliberation %}
        <div class="card-body">
            {{ include('_includes/ajax/response.html.twig') }}
            <div class="row">
                <div class="col-md-3">{{ form_row(form.dateExamen) }}</div>
                <div class="col-md-9">{{ form_row(form.etudiant) }}</div>
            </div>
            {{ prototype_ligne_deliberation(form) }}
            <div class="row">
                <div class="col-md-12">{{ form_row(form.commentaire) }}</div>
            </div>
        </div>      
    </div>
    {{ form_widget(form._token) }}
    {{ form_end(form, {render_rest: false}) }}
{% endblock %}

{% block java %}
    <script>
        init_select2('select');
        const mentions = {{ mentions |raw }};
        console.log(mentions);
        function update_totaux() {
            const $total_coeff = $('.total-col-coeff');
            const $total_note = $('.total-col-note');
            const $total_total = $('.total-col-total');

            let $cols = [$('.col-coeff'), $('.col-note'), $('.col-total')];
            let totaux = {};
            for (let $col of $cols) {
                $col.each(function () {
                    const $this = $(this)
                    let class_name = $this.attr('data-class');
                    if (typeof totaux[class_name] == 'undefined') {
                        if (class_name != 'col-total') {
                            totaux[class_name] = +$this.find('input').val();
                        } else {
                            totaux[class_name] = convertNumber($this.text());
                        }
                    } else {
                        if (class_name != 'col-total') {
                            totaux[class_name] += +$this.find('input').val();
                        } else {
                            totaux[class_name] += convertNumber($this.text());
                        }
                    }
                })
               
            }

            console.log( totaux );
            for (let key of Object.keys(totaux)) {
                console.log( key );
                $(`.total-${key}`).text(setValue(totaux[key]));
            }
            
            let moyenne = calculate_moyenne();
            $('.total-moyenne').text(setValue(moyenne, false));
            $('.col-mention').text(get_mention(moyenne));
        }


        function calculate_moyenne() {
            const total_coeff = +$('.total-col-coeff').text().replaceAll(' ', '');
            const total_note = $('.total-col-note');
            const total_total = +$('.total-col-total').text().replaceAll(' ', '');
            //console.log( total_total / total_coeff);
            return Number((total_total / total_coeff).toFixed(3)).toFixed(2);
        }


        function get_mention(moyenne) {
            //let moyenne = calculate_moyenne();
            for (let range of Object.keys(mentions)) {
                let [min, max] = range.split('-');
                min = +min;
                max = +max;
                if (moyenne >= min && max > moyenne) {
                    return mentions[range];
                }
            }
            return 'N/A';
        }

        update_totaux();

        $('.input-note').on('update-value', function (e, val, element) {
            if (typeof val == 'undefined') {
                val = $(this).val();
            }

            if (!element) {
                element = this;
            }
            const $tr = $(element).closest('tr');
            const coeff = +$tr.find('.input-coeff').val();
            const $total = $tr.find('.col-total');
            $total.text( setValue(coeff * +val.replaceAll(' ', '') ) );
            update_totaux();
        });



        function round(num,dec) {
            num = Math.round(num+'e'+dec)
            return Number(num+'e-'+dec)
        }
        //Round to a decimal of your choosing:
       

       
    </script>
{% endblock %}
